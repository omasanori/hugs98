<chapter id="install">
<title>Installing Hugs from source</title>

<para>
Precompiled binaries are provided for common platforms.
This chapter discusses installing Hugs from source.
Similar installation procedures can be used for most machines
if you have a suitable C compiler.
<para>

<sect1 id="install-unix">
<title>Installing on Unix, MacOs X or similar</title>

<sect2 id="install-unix-short">
<title>Short version</title>

<programlisting>
    cd src/unix
    ./configure --prefix=$HOME
    cd ..
    make install
    make clean
    $HOME/bin/hugs $HOME/lib/hugs/demos/Say
    putStr (say "  /Hugs")
    :quit
</programlisting>

</sect2>

<sect2 id="install-unix-long">
<title>Long version</title>

<orderedlist>
<listitem>
<para>
Choose a directory (or directories) for the Hugs files to go in.
In the following, we'll assume:
<programlisting>
    /usr/local/solaris/bin             user executables
    /usr/local/solaris/lib/hugs        architecture dependent files
    /usr/local/lib/hugs                architecture independent files
</programlisting>
Check that these directories have appropriate permission settings.
</para>
</listitem>

<listitem>
<para>
Run the configure script
<programlisting>
    cd hugs98/src/unix
    ./configure --exec-prefix=/usr/local/solaris --datadir=/usr/local/lib
</programlisting>
This tests the capabilities of your C compiler and OS
and arranges to install binaries in the directories places.
Read <filename>hugs98/src/unix/INSTALL</filename> to find out about
general configuration options.
See <xref linkend="hugs-configure"> for Hugs-specific options.
</para>
</listitem>

<listitem>
<para>
Build Hugs and associated files
<programlisting>
    cd ..
    make
</programlisting>
At this point, you might like to run a few tests to make sure
everything's working:
<programlisting>
      ./hugs -P../lib
</programlisting>
You might run a few tests like <literal>1+2</literal>,
<literal>[1..]</literal>, etc.
Use <quote><command>:quit</command></quote> to exit.
</para>
</listitem>

<listitem>
<para>
Install Hugs in chosen directories
<programlisting>
      make install
</programlisting>
(Note that the permissions of the installed files will be affected by
your <quote>umask</quote> setting.
If you want the installed files to be world
readable, you need to set umask accordingly.)
</para>

<para>
Try a few simple tests:
<programlisting>
      /usr/local/solaris/bin/hugs
      [1..10]
      :quit

      cat > echo &lt;&lt;EOF
      #! /usr/local/solaris/bin/runhugs +l

      > module Main(main) where
      > import System(getArgs)
      >
      > main = do { args <- getArgs; putStrLn (unwords args) }
      EOF
      chmod 755 echo
      ./echo Hello World
</programlisting>
On Unix, regression tests are run by
<quote><literal>make check</literal></quote>.
</para>

<para>
Administrators of sites with multiple architectures often prefer to
install a shell script in <filename>/usr/local/bin</filename> which will
select an appropriate binary according to the architecture on which it is
run rather than a binary.
Configuration should be the same as above
(use a different <option>--bindir</option> argument for each architecture but,
if you want, save a small amount of space by using the same
<option>--datadir</option>) and use a shell script like the following.
<programlisting>
      #! /bin/sh

      HW_OS=${HW_OS-`/usr/local/gnu/bin/hw_os`}
      BINDIR=/local/lib/Hugs1.4/$HW_OS
      exec $BINDIR/hugs $*
</programlisting>
This kind of script would also be a good place to set system-wide
default options (eg to select an editor or to switch on the
<quote>show types</quote> option).
</para>
</listitem>

<listitem>
<para>
Cleanup after yourself.
</para>

<para>
You can now run <quote><literal>make clean</literal></quote>
to delete all machine-generated files.
If you ran <quote><literal>make install</literal></quote>,
you could delete the entire Hugs source tree &mdash;
but you might want to keep the <filename>hugs98/docs</filename> directory.
</para>
</listitem>

</orderedlist>

</sect1>

<sect1 id="install-windows">
<title>Installing on Windows</title>

<para>
Pick one of the following configurations:
<programlisting>
      msc:     Microsoft Visual C++
      winhugs: Microsoft Visual C++, Hugs for Windows
      bcc32:   32 bit Borland C
      djgpp2:  DJGPP2
</programlisting>
and run
<programlisting>
      cd Hugs98\src\{msc,winhugs,bcc32,djgpp2}
      config.bat
</programlisting>
If you haven't used Visual C++ or Borland C from the command line
before, you might have to define some environment variables (in
autoexec.bat or using <quote>Control Panel|System"</quote>) before you can use
the compiler &mdash; check your compiler documentation.
<programlisting>
      make hugs.exe   (or nmake hugs.exe with Visual C++)
</programlisting>
If you prefer to use an integrated development environment,
run <quote><literal>make hugs.exe -n</literal></quote> to get a list
of the files we compile and add them to your project.
</para>

<para>
On Windows, you have to <quote><literal>move hugs.exe ..</literal></quote>
before running it.
</para>

</sect1>

<sect1 id="install-mac">
<title>Installing on MacOS (pre MacOS X)</title>

<para>
Open CodeWarrior Pro 5 and choose [File->Import Project...].
Select the file <filename>:hugs98:src:machugs:hugs.mcp.xml</filename>.
When the file dialog appears, name the new project
<quote><filename>hugs.mcp</filename></quote>, and save it in the
same folder as the imported xml file.
Then choose <quote>[Project->Make]</quote>.
The Hugs 98 application will be created in the <filename>hugs98</filename>
folder.
</para>

<para>
Preferences in the form of a Hugs command line string can be saved
in a file <quote><filename>Hugs Preferences</filename></quote>
in the same folder as the application.
</para>

</sect1>

<sect1 id="install-other">
<title>Installing on another platform</title>

<para>
If you can't run the configure script, pick one of the Windows
configurations and use it as a basis for constructing the
following files
<programlisting>
        hugs98/src/Makefile
        hugs98/src/options.h   # Configuration options
        hugs98/src/config.h    # Description of your machine/compiler/OS
</programlisting>
</para>

</sect1>

<sect1 id="hugs-configure">
<title>Configuration options</title>

<para>
The following options to <command>configure</command> may be used to adjust
your Hugs installation.
</para>

<variablelist>

<varlistentry>
<term><option>--enable-ffi</option> / <option>--disable-ffi</option></term>
<listitem>
<para>
Provide (or not) libraries that use the Foreign Function Interface.
By default, this is enabled for systems for which the FFI has been
implemented, which includes most common architectures.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>--enable-timer</option></term>
<listitem>
<para>
Time how long each evaluation takes.
</para>

<para>
Timing is included for the purpose of benchmarking the Hugs interpreter,
comparing its performance across a variety of different machines, and
with other systems for similar languages.
</para>

<para>
It would be somewhat foolish to try to use the timings produced in this
way for any other purpose.
In particular, using timings to compare the performance of different
versions of an algorithm is likely to give very misleading results.
The current implementation of Hugs as an interpreter, without any
significant optimizations, means that there are much more significant
overheads than can be accounted for by small variations in Hugs code.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>--enable-profiling</option></term>
<listitem>
<para>
Gather statistics about heap allocation during evaluation.
Statistics are written to a file profile.hp which may be viewed
using the <command>hp2ps</command> program.
</para>

<para>
This option makes Hugs use much more memory and run much slower.
The <quote><literal>:set -d</literal></quote> command can be used
to reduce the time overhead by controlling the frequency
with which statistics are gathered.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>--with-nmake</option></term>
<listitem>
<para>
Try to generate a Makefile that will work with Microsoft's nmake.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>--disable-large-banner</option></term>
<listitem>
<para>
Print a single-line startup banner instead of the 9 line banner.
(This option will cause the <quote><literal>make check</literal></quote>
regression tests to fail.)
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>--with-gui</option></term>
<listitem>
<para>
Used when generating Hugs for Windows.  Only works with Borland C++.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>--enable-internal-prims</option></term>
<listitem>
<para>
Enable experimental features used in the <literal>Hugs.Internals</literal>
module.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>--enable-stack-dumps</option></term>
<listitem>
<para>
Enable printing of the top and bottom few objects on the stack when
stack overflow happens.
This feature is currently (Sept'97) just a proof of concept.
We welcome suggestions (and/or code) to make it useful for people who
don't have an intimate knowledge of how the G-machine operates.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>--enable-debug</option></term>
<term><option>--enable-tag-checks</option></term>
<term><option>--enable-lint</option></term>
<listitem>
<para>
For use when debugging Hugs.
</para>
</listitem>
</varlistentry>

<varlistentry>
<term><option>--with-preprocessor</option></term>
<listitem>
<para>
This is an experimental feature and may change in future versions.
(It's turned on by default at the moment.)
</para>

<para>
Enable the use of a preprocessor for processing Haskell source files
before compiling them with Hugs.  When configured with preprocessing on,
you can use the <option>-F</option> option to specify which preprocessor
to use.
For example, if your preprocessor is in
<filename>/users/JFH/bin/hscpp</filename>, you might say
<programlisting>
     :set -F"/users/JFH/bin/hscpp"
</programlisting>
If you have perl and gcc installed on your machine, the following
script provides a simple cpp-like preprocessor.
<programlisting>
     eval "exec perl -S $0 $*"
          if $running_under_some_random_shell;
     #
     # Reads CPP output and turns #line things into appropriate Haskell
     # pragmas.  This program is derived from the "hscpp" script
     # distributed with the Glasgow Haskell Compiler.
     #
     $Cpp = 'gcc -E -xc -traditional';
     open(INPIPE, "$Cpp @ARGV |") || die "Can't open C pre-processor pipe\n";
     while (&lt;INPIPE>) {
     # line directives come in flavo[u]rs:
     #   s/^#\s*line\s+\d+$/\{\-# LINE \-\}/;   IGNORE THIS ONE FOR NOW
         s/^#\s*line\s+(\d+)\s+(\".+\")$/\{\-# LINE \1 \2 \-\}/;
         s/^#\s*(\d+)\s+(\".*\").*/\{\-# LINE \1 \2 \-\}/;
         print $_;
     }
     close(INPIPE) || exit(1); # exit is so we reflect any errors.
     exit(0);
</programlisting>
Note that Hugs currently ignores the <literal>{-# LINE _ _ #-}</literal>
pragmas so error messages will refer to the wrong line numbers.
</para>
</listitem>
</varlistentry>

</variablelist>

</sect1>

</chapter>
