-- Extract a field from a package description
-- (Not quite right: should also follow package dependencies)

module Main(main) where

import Data.Char (isSpace)
import Data.List (isPrefixOf)
import Data.Maybe (mapMaybe)
import System.Environment
import System.Exit
import System.IO

main = do
	args <- getArgs
	case args of
	    [field, arg] -> getField field arg
	    _ -> do
		progName <- getProgName
		hPutStrLn stderr
		    ("usage: " ++ progName ++ " field package-file")
		exitFailure

getField :: String -> FilePath -> IO ()
getField field pkg_file = do
	def <- readFile pkg_file
	let pkg = parsePackageConfig def
	case lookup field pkg of
	    Just val -> putStrLn val
	    Nothing -> return ()

parsePackageConfig :: String -> [(String, String)]
parsePackageConfig =
	mapMaybe splitField . squash . map trimTrailingSpace .
		filter (not . isComment) . lines

trimTrailingSpace :: String -> String
trimTrailingSpace = reverse . dropWhile isSpace . reverse

squash :: [String] -> [String]
squash [] = []
squash ("":ls) = squash ls
squash (l:ls) = unwords (l:map (dropWhile isSpace) conts) : squash rest
  where	(conts, rest) = span isContinuation ls

isContinuation :: String -> Bool
isContinuation [] = False
isContinuation (c:_) = isSpace c

splitField :: String -> Maybe (String, String)
splitField cs = case break (== ':') cs of
	(field, ':':value) -> Just (field, dropWhile isSpace value)
	_ -> Nothing

isComment :: String -> Bool
isComment line = isPrefixOf "--" (dropWhile isSpace line)
