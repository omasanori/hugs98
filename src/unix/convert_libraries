#!/bin/sh

# This script generates:
# $2/libraries:
#	copies of the heirarchical libraries suitable for
#	use with Hugs.  Note that some of the libraries require extensions
#	to Haskell 98 and have to be run with the -98 flag.
# $2/oldlib:
#	compatibility stubs for old Hugs libraries
#
# A HUGSPATH consisting of both of these should approximate the old libs,
# and be fairly compatible with GHC.  If you're completely switched over,
# delete the second one.
#
# Usage:
#
#   ./convert_libraries  <directory where libraries lives> <build dir>

cpp_flags='-D__HUGS__'

cpp=${cpp-gcc -P -E -traditional -xc}

case $# in
2)	;;
*)	echo "usage: $0 <directory where libraries lives> <build dir>" >&2
	exit 1 ;;
esac

src=$1/libraries
if [ ! -d $src ]; then
	echo "Can't find libraries in directory '$1'" >&2
	exit 1
fi

hs_src=$1/hslibs
if [ ! -d $hs_src ]; then
	echo "Can't find hslibs in directory '$1'" >&2
	exit 1
fi

target="$2"
dst="$target/libraries"
compat="$target/oldlib"

# Create a compatibility stub for a Hugs extension module

stub() {
	case $# in
	0)	echo "usage: stub module [module ...]" >&2
		exit 1 ;;
	esac

	stub_module=$1
	shift
	echo "Stub $stub_module -> $*"
	(
		echo "module $stub_module("
		for real
		do	echo "	module $real,"
		done
		echo '    ) where'
		echo
		for real
		do	echo "import $real"
		done
	) >$compat/$stub_module.hs
}

# Copy the Hugs version to the compatibility lib

libexts() {
	case $# in
	1)	;;
	*)	echo "usage: libexts module" >&2
		exit 1 ;;
	esac

	name="`ls ../../lib/exts/$1.*hs`"
	echo "Copy `basename $name`"
	sed 's/import Prelude/import Hugs.Prelude/' $name >$compat/`basename $name`
}

libhugs() {
	case $# in
	1)	;;
	*)	echo "usage: libhugs module" >&2
		exit 1 ;;
	esac

	name="`ls ../../lib/hugs/$1.*hs`"
	echo "Copy `basename $name`"
	sed 's/import Prelude/import Hugs.Prelude/' $name >$compat/`basename $name`
}

# Convert the hslibs version to the compatibility lib

hslibs() {
	case $# in
	2)	;;
	*)	echo "usage: hslibs dir file" >&2
		exit 1 ;;
	esac

	echo "Converting $2"
	$cpp $cpp_flags $hs_src/$1/$2 >$compat/$2
}

# Convert hierarchical modules

for package in base haskell98 haskell-src network
do
	./convert_package $1/libraries/$package $dst
done

  echo Copying FFI support files
  cp ../config.h                        $dst/Foreign/C
  cp $src/base/cbits/errno.c            $dst/Foreign/C
  cp $src/base/include/*.h              $dst/Foreign/C
  cp ../config.h                        $dst/Network
  cp $src/network/include/HsNet.h       $dst/Network
  cp $src/network/cbits/ancilData.c     $dst/Network
  cp $src/network/cbits/initWinSock.c   $dst/Network
  cp $src/network/cbits/winSockErr.c    $dst/Network
  cp $src/network/cbits/HsNet.c         $dst/Network

# Compatibility with lib/exts:

mkdir -p $compat

# Hugs-only modules

  stub ConcBase		Hugs.ConcBase
  stub HugsStorable	Hugs.Storable
  stub Memo		Hugs.Memo	# hslibs module is different
  stub Observe		Hugs.Observe	# hslibs module is different

# Stuff from hslibs (many of these are stubs)

  hslibs concurrent CVar.lhs
  hslibs concurrent Chan.lhs
  hslibs concurrent Channel.lhs
  hslibs concurrent ChannelVar.lhs
  hslibs concurrent Concurrent.lhs
  hslibs concurrent MVar.lhs
# hslibs concurrent Merge.lhs		# needs pre-emptive concurrency
  hslibs concurrent Parallel.lhs
  hslibs concurrent QSem.lhs
  hslibs concurrent QSemN.lhs
  hslibs concurrent SampleVar.lhs
  hslibs concurrent Semaphore.lhs
# hslibs concurrent Strategies.lhs

  hslibs data FiniteMap.lhs
  hslibs data Set.lhs

  cp $hs_src/data/edison/COPYRIGHT $compat/COPYRIGHT.edison
  hslibs data/edison/Assoc Assoc.hs
  hslibs data/edison/Assoc AssocDefaults.hs
  hslibs data/edison/Assoc AssocList.hs
  hslibs data/edison/Assoc PatriciaLoMap.hs
  hslibs data/edison EdisonPrelude.hs
  hslibs data/edison/Coll Collection.hs
  hslibs data/edison/Coll CollectionDefaults.hs
  hslibs data/edison/Coll CollectionUtils.hs
  hslibs data/edison/Coll LazyPairingHeap.hs
  hslibs data/edison/Coll LeftistHeap.hs
  hslibs data/edison/Coll MinHeap.hs
  hslibs data/edison/Coll SkewHeap.hs
  hslibs data/edison/Coll SplayHeap.hs
  hslibs data/edison/Coll TestOrdBag.hs
  hslibs data/edison/Coll TestOrdSet.hs
  hslibs data/edison/Coll UnbalancedSet.hs
  hslibs data/edison/Seq BankersQueue.hs
  hslibs data/edison/Seq BinaryRandList.hs
  hslibs data/edison/Seq BraunSeq.hs
  hslibs data/edison/Seq JoinList.hs
  hslibs data/edison/Seq ListSeq.hs
  hslibs data/edison/Seq MyersStack.hs
  hslibs data/edison/Seq RandList.hs
  hslibs data/edison/Seq RevSeq.hs
  hslibs data/edison/Seq Sequence.hs
  hslibs data/edison/Seq SequenceDefaults.hs
  hslibs data/edison/Seq SimpleQueue.hs
  hslibs data/edison/Seq SizedSeq.hs
  hslibs data/edison/Seq TestSeq.hs

# hslibs lang Addr.lhs			# deprecated
 libexts Addr
  hslibs lang ArrayBase.hs		# -> Data.Array.Base
  hslibs lang Arrow.hs
# hslibs lang ByteArray.lhs		# deprecated
# hslibs lang CCall.lhs			# GHC-specific (and obsolete)
  hslibs lang CTypesISO.hs
# hslibs lang DiffArray.hs		# -> Data.Array.Diff
# hslibs lang DirectoryExts.hs
  hslibs lang Dynamic.hs
  hslibs lang Exception.hs
# hslibs lang ForeignObj.lhs		# deprecated
 libexts ForeignObj			# uses Hugs primitives
# hslibs lang Generics.hs		# GHC-specific
# hslibs lang GlaExts.lhs		# deprecated
  hslibs lang IArray.hs
# hslibs lang IOExts.hs
  stub IOExts		Hugs.IOExts Hugs.IORef Hugs.IOArray
  hslibs lang IORef.hs
# hslibs lang LazyST.hs
  stub LazyST		Hugs.LazyST
# hslibs lang MArray.hs			# lots of GHC stuff (and obsolete)
# hslibs lang MutableArray.lhs		# deprecated
# hslibs lang NativeInfo.hs		# -> System.Info
  hslibs lang NumExts.lhs
# hslibs lang PackedString.lhs		# GHC-specific
# hslibs lang PrelByteArr.lhs		# GHC-specific
# hslibs lang ST.hs			# GHC-specific
  stub ST		Hugs.ST
  hslibs lang ShowFunctions.hs
  hslibs lang Stable.hs
  hslibs lang StableName.hs
  hslibs lang StorableArray.hs		# -> Data.Array.Storable
# hslibs lang SystemExts.lhs		# GHC-specific
# hslibs lang TimeExts.lhs
  hslibs lang Weak.hs

  hslibs lang/monads MonadCont.lhs
  hslibs lang/monads MonadEither.lhs
  hslibs lang/monads MonadError.lhs
  hslibs lang/monads MonadFix.lhs
  hslibs lang/monads MonadIdentity.lhs
  hslibs lang/monads MonadList.lhs
  hslibs lang/monads MonadRWS.lhs
  hslibs lang/monads MonadReader.lhs
  hslibs lang/monads MonadState.lhs
  hslibs lang/monads MonadTrans.lhs
  hslibs lang/monads MonadWriter.lhs
  hslibs lang/monads Monoid.lhs

# hslibs text MatchPS.lhs
  hslibs text Pretty.lhs
# hslibs text Regex.lhs
# hslibs text RegexString.lhs

  hslibs text/html Html.lhs
  hslibs text/html HtmlBlockTable.lhs

  hslibs text/parsec Parsec.hs
  hslibs text/parsec ParsecChar.hs
  hslibs text/parsec ParsecCombinator.hs
  hslibs text/parsec ParsecError.hs
  hslibs text/parsec ParsecExpr.hs
  hslibs text/parsec ParsecLanguage.hs
  hslibs text/parsec ParsecPerm.hs
  hslibs text/parsec ParsecPos.hs
  hslibs text/parsec ParsecPrim.hs
  hslibs text/parsec ParsecToken.hs

  hslibs util GetOpt.lhs
# hslibs util MD5.lhs			# needs PackedString, etc
# hslibs util Memo.lhs			# Hugs module is different
# hslibs util Observe.lhs		# Hugs module is different
# hslibs util Select.lhs
  hslibs util Unique.lhs

  hslibs util/check QuickCheck.hs
# hslibs util/check QuickCheckBatch.hs	# -> Debug.QuickCheck.Batch
  hslibs util/check QuickCheckPoly.hs
  hslibs util/check QuickCheckUtils.hs

# Compatibility with lib/hugs:

  libhugs AnsiInteract
  libhugs AnsiScreen
     stub CVHAssert		Hugs.CVHAssert
     stub GenericPrint		Hugs.GenericPrint
  libhugs HugsDynamic				# temporary measure
     stub HugsInternals		Hugs.Internals
  libhugs HugsLibs				# only useful for testing
     stub IOExtensions		Hugs.IOExts
  libhugs Interact
  libhugs ListUtils
  libhugs Number
  libhugs ParseLib
     stub Quote			Hugs.Quote	# only hugs supports here docs
  libhugs StdLibs				# only useful for testing
     stub Trace			Debug.Trace
     stub Trex			Hugs.Trex	# only hugs supports Trex
