dnl--------------------------------------------------------------------
dnl
dnl Hugs98 configure script template. Process this file with autoconf to
dnl produce a configure script.
dnl
dnl--------------------------------------------------------------------

AC_INIT(../hugs.c)
AC_CONFIG_HEADER(../config.h ../options.h)

dnl--------------------------------------------------------------------
dnl Choose host(/target/build) platform
dnl--------------------------------------------------------------------

dnl Guess host/target/build platform(s) if necessary.
AC_CANONICAL_SYSTEM

# "$host" defaults to "$target"
if test "x$host" = xNONE ; then
    host=$target
fi

dnl ** canonicalize platform names
BuildPlatform=`/bin/sh $srcdir/config.sub $build` || exit 1
HostPlatform=`/bin/sh $srcdir/config.sub $host` || exit 1
TargetPlatform=`/bin/sh $srcdir/config.sub $target` || exit 1

if test x"$TargetPlatform" != x"$HostPlatform" ; then
    echo "Hugs98 does not yet support differing host/target (i.e., cross-compiling)"
    exit 1
fi

host_cpu=`echo $HostPlatform | sed 's/-.*//'`
host_os=[`echo $HostPlatform | sed 's/^\([^-]*\)-\([^-]*\)-\([^-]*\).*/\3/'`]

AC_DEFINE_UNQUOTED(HOST_ARCH, "$host_cpu")
AC_DEFINE_UNQUOTED(HOST_OS, "$host_os")

dnl--------------------------------------------------------------------
dnl
dnl Check for programs
dnl
dnl--------------------------------------------------------------------

dnl ToDo: if we have YACC, insert parser.c: parser.y in Makefile
AC_PROG_YACC
if test "`basename ${YACC}`x" = "byaccx"; then
   echo "Found 'byacc', but the Hugs98 parser is incompatible with it."
   echo "You need to install 'bison' and re-run the configure script."
   exit 1;
fi;

AC_PROG_CC
AC_PROG_CPP
AC_PROG_GCC_TRADITIONAL

CFLAGS="-g"
OPTFLAGS="-O2"

dnl  The following patch avoids the outburst of (benign) error messages during 
dnl  compilation of machine.c under MacOS X/Darwin, as well as some linker 
dnl  warnings caused by the default two-level namespace introduced in version 10.1
dnl
case $HostPlatform in
  *-*-darwin*)CFLAGS="$CFLAGS -no-cpp-precomp"; LDFLAGS="$LDFLAGS -flat_namespace" ;;
  # As suggested by James B. White III (Trey) <whitejbiii@ornl.gov> (for
  # AIX 4.3.3 & XL C 5.0.2 at least, may need to tweak the pattern match
  # below some to avoid upsetting other AIX versions).
  *-*-aix*) 
     optcflags="-qalloca"
     CFLAGS_save="$CFLAGS"
     CFLAGS="$CFLAGS $optcflags"
     AC_MSG_CHECKING([whether $CC accepts $optcflags])
     AC_LANG_C
     AC_TRY_LINK([],[int main(){return(0);}],[optok=yes],[optok=no])
     if test "$optok" = "yes"; then
	# lump the recognition of -qalloca together with -qmaxmem=-1 and -bmaxdata..
        CFLAGS="$CFLAGS_save $optcflags"
	LDFLAGS="$LDFLAGS -bmaxdata:0x70000000"; 
	OPTFLAGS="-O -qmaxmem=-1"
        AC_MSG_RESULT([yes])
     else
        CFLAGS="$CFLAGS_save"
	AC_MSG_RESULT([no])
     fi
      ;;
  *-*-cygwin*)
     EXE='.exe'
     ;;
  *-*-mingw*)
     EXE='.exe'
     ;;
  *) ;;
esac

AC_CHECK_PROG(LD,ld,ld)
AC_CHECK_PROGS(PERL,perl)  dnl should test for perl5
AC_PROG_MAKE_SET
AC_CHECK_PROG(have_hp2ps,hp2ps,1,0)
if test "$have_hp2ps" = "1"; then
AC_DEFINE(HAVE_HP2PS,1)
fi

dnl AC_PROG_INSTALL

dnl POSIX systems prefer "diff -C 1"; SunOS4 prefers "diff -c1".
AC_PROG_DIFF

dnl If you can run configure, you certainly have /bin/sh
AC_DEFINE(HAVE_BIN_SH)

dnl--------------------------------------------------------------------
dnl 
dnl Check for libraries
dnl
dnl--------------------------------------------------------------------


AC_CHECK_LIB_NOWARN(dl, dlopen)
AC_CHECK_LIB_NOWARN(dld, shl_load)
AC_CHECK_LIB_NOWARN(m, atan)
AC_PATH_XTRA

dnl--------------------------------------------------------------------
dnl
dnl Check for header files
dnl
dnl--------------------------------------------------------------------

AC_HEADER_STDC
dnl checks for sys/wait.h
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(
  stdarg.h stdlib.h unistd.h assert.h ctype.h string.h limits.h \
  fcntl.h sgtty.h termio.h termios.h signal.h \
  arpa/inet.h \
  netdb.h netinet/tcp.h \
  sys/stat.h sys/types.h sys/ioctl.h sys/resource.h sys/param.h \
  sys/socket.h sys/timers.h sys/uio.h sys/un.h sys/utsname.h \
  console.h pascal.h Files.h errno.h stat.h nlist.h ftw.h direct.h \
  grp.h pwd.h \
  dirent.h utime.h vfork.h
  )

AC_HEADER_TIME
AC_CHECK_HEADERS(time.h sys/time.h sys/timeb.h sys/times.h)

dnl One of these two is used to obtain floating point parameters
AC_CHECK_HEADERS(float.h values.h)

dnl DOS include files
AC_CHECK_HEADERS(dos.h conio.h io.h std.h) 

dnl Windows include files
AC_CHECK_HEADERS(windows.h winsock.h)

dnl dynamic loading include files
if test "$target" = windows; then
  dynamic_loading=yes
else
  dynamic_loading=no
fi
AC_CHECK_HEADERS(dlfcn.h dl.h mach-o/dyld.h, [dynamic_loading=yes])

dnl Checks for:
dnl   farcalloc (in bcc), 
dnl   valloc (in sunos, solaris, mips, amiga, next, minix, ultrix)
AC_CHECK_HEADER(alloc.h,[AC_CHECK_FUNCS(farcalloc)])
AC_CHECK_HEADER(malloc.h,[AC_CHECK_FUNCS(valloc)])

dnl --------------------------------------------------
dnl * test for netinet/in.h and in_addr_t
dnl --------------------------------------------------
AC_CHECK_HEADERS(netinet/in.h,
 [AC_MSG_CHECKING(for in_addr_t in netinet/in.h)
 AC_EGREP_HEADER(in_addr_t, netinet/in.h,
  [AC_DEFINE(HAVE_IN_ADDR_T) AC_MSG_RESULT(yes)],
  [AC_MSG_RESULT(no)])])

dnl--------------------------------------------------------------------
dnl
dnl Check for types 
dnl
dnl--------------------------------------------------------------------

dnl ** do we have long longs?
FPTOOLS_C_LONG_LONG

dnl ** check what fields struct msghdr contains
FPTOOLS_MSGHDR_MSG_ACCRIGHTS
FPTOOLS_MSGHDR_MSG_CONTROL

dnl ** what are the sizes of various types
dnl    (these must come before GHC_CHECK_ALIGNMENT)
AC_CHECK_SIZEOF(char,               1)
AC_CHECK_SIZEOF(double,             8)
AC_CHECK_SIZEOF(float,              4)
AC_CHECK_SIZEOF(int,                4)
AC_CHECK_SIZEOF(long,               4)
if test "$fptools_cv_have_long_long" = yes; then
AC_CHECK_SIZEOF(long long,          8)
fi
AC_CHECK_SIZEOF(short,              2)
AC_CHECK_SIZEOF(unsigned char,      1)
AC_CHECK_SIZEOF(unsigned int,       4)
AC_CHECK_SIZEOF(unsigned long,      4)
if test "$fptools_cv_have_long_long" = yes; then
AC_CHECK_SIZEOF(unsigned long long, 8)
fi
AC_CHECK_SIZEOF(unsigned short,     2)
AC_CHECK_SIZEOF(void *,             4)

dnl ** what are alignment constraints on various types
FPTOOLS_CHECK_ALIGNMENT(char)
FPTOOLS_CHECK_ALIGNMENT(double)
FPTOOLS_CHECK_ALIGNMENT(float)
FPTOOLS_CHECK_ALIGNMENT(int)
FPTOOLS_CHECK_ALIGNMENT(long)
if test "$fptools_cv_have_long_long" = yes; then
FPTOOLS_CHECK_ALIGNMENT(long long)
fi
FPTOOLS_CHECK_ALIGNMENT(short)
FPTOOLS_CHECK_ALIGNMENT(unsigned char)
FPTOOLS_CHECK_ALIGNMENT(unsigned int)
FPTOOLS_CHECK_ALIGNMENT(unsigned long)
if test "$fptools_cv_have_long_long" = yes; then
FPTOOLS_CHECK_ALIGNMENT(unsigned long long)
fi
FPTOOLS_CHECK_ALIGNMENT(unsigned short)
FPTOOLS_CHECK_ALIGNMENT(void *)

dnl ** map standard C types and ISO types to Haskell types
FPTOOLS_CHECK_HTYPE(char)
FPTOOLS_CHECK_HTYPE(signed char)
FPTOOLS_CHECK_HTYPE(unsigned char)
FPTOOLS_CHECK_HTYPE(short)
FPTOOLS_CHECK_HTYPE(unsigned short)
FPTOOLS_CHECK_HTYPE(int)
FPTOOLS_CHECK_HTYPE(unsigned int)
FPTOOLS_CHECK_HTYPE(long)
FPTOOLS_CHECK_HTYPE(unsigned long)
if test "$fptools_cv_have_long_long" = yes; then
FPTOOLS_CHECK_HTYPE(long long)
FPTOOLS_CHECK_HTYPE(unsigned long long)
fi
FPTOOLS_CHECK_HTYPE(float)
FPTOOLS_CHECK_HTYPE(double)
FPTOOLS_CHECK_HTYPE(ptrdiff_t)
FPTOOLS_CHECK_HTYPE(size_t)
FPTOOLS_CHECK_HTYPE(wchar_t)
dnl Int32 is a HACK for non-ISO C compilers
FPTOOLS_CHECK_HTYPE(sig_atomic_t, Int32)
FPTOOLS_CHECK_HTYPE(clock_t)
FPTOOLS_CHECK_HTYPE(time_t)
FPTOOLS_CHECK_HTYPE(dev_t, Word32)
FPTOOLS_CHECK_HTYPE(ino_t)
FPTOOLS_CHECK_HTYPE(mode_t)
FPTOOLS_CHECK_HTYPE(off_t)
FPTOOLS_CHECK_HTYPE(pid_t)
FPTOOLS_CHECK_HTYPE(gid_t)
FPTOOLS_CHECK_HTYPE(uid_t)
FPTOOLS_CHECK_HTYPE(cc_t)
FPTOOLS_CHECK_HTYPE(speed_t)
FPTOOLS_CHECK_HTYPE(tcflag_t)
FPTOOLS_CHECK_HTYPE(nlink_t)
FPTOOLS_CHECK_HTYPE(ssize_t)
FPTOOLS_CHECK_HTYPE(rlim_t)

FPTOOLS_CHECK_CCONSTS(E2BIG EACCES EADDRINUSE EADDRNOTAVAIL EADV EAFNOSUPPORT EAGAIN EALREADY EBADF EBADMSG EBADRPC EBUSY ECHILD ECOMM ECONNABORTED ECONNREFUSED ECONNRESET EDEADLK EDESTADDRREQ EDIRTY EDOM EDQUOT EEXIST EFAULT EFBIG EFTYPE EHOSTDOWN EHOSTUNREACH EIDRM EILSEQ EINPROGRESS EINTR EINVAL EIO EISCONN EISDIR ELOOP EMFILE EMLINK EMSGSIZE EMULTIHOP ENAMETOOLONG ENETDOWN ENETRESET ENETUNREACH ENFILE ENOBUFS ENODATA ENODEV ENOENT ENOEXEC ENOLCK ENOLINK ENOMEM ENOMSG ENONET ENOPROTOOPT ENOSPC ENOSR ENOSTR ENOSYS ENOTBLK ENOTCONN ENOTDIR ENOTEMPTY ENOTSOCK ENOTTY ENXIO EOPNOTSUPP EPERM EPFNOSUPPORT EPIPE EPROCLIM EPROCUNAVAIL EPROGMISMATCH EPROGUNAVAIL EPROTO EPROTONOSUPPORT EPROTOTYPE ERANGE EREMCHG EREMOTE EROFS ERPCMISMATCH ERREMOTE ESHUTDOWN ESOCKTNOSUPPORT ESPIPE ESRCH ESRMNT ESTALE ETIME ETIMEDOUT ETOOMANYREFS ETXTBSY EUSERS EWOULDBLOCK EXDEV)

dnl--------------------------------------------------------------------
dnl
dnl Check for library functions.
dnl
dnl--------------------------------------------------------------------


dnl Old: AC_CHECK_FUNCS(WinExec GetModuleFileName)       dnl Windows
dnl Doesn't work because the linker can't see the functions if
dnl you omit the #include <windows.h>.  (I've no idea why not...)

AC_TRY_LINK_NOWARN(,[
#if HAVE_WINDOWS_H
#include <windows.h>
#endif
main() { 
  WinExec("",0);
  exit(0);
}
],
[have_winexec=1],
[have_winexec=0])
if test "$have_winexec" = "1"; then
AC_DEFINE(HAVE_WINEXEC)
fi

AC_TRY_LINK_NOWARN(,[
#if HAVE_WINDOWS_H
#include <windows.h>
#endif
main() { 
  char* dir;
  GetModuleFileName((HMODULE)0,dir,0);
  exit(0);
}
],
[have_getmodulefilename=1],
[have_getmodulefilename=0])
if test "$have_getmodulefilename" = "1"; then
AC_DEFINE(HAVE_GETMODULEFILENAME)
fi

AC_CHECK_FUNCS(strcasecmp _stricmp stricmp strcmpi)
AC_CHECK_FUNCS(strcmp)
AC_CHECK_FUNCS(rindex)
AC_CHECK_FUNCS(strrchr)
AC_CHECK_FUNCS(canonicalize_file_name realpath _fullpath)  
AC_CHECK_FUNCS(PBHSetVolSync macsystem)  
AC_CHECK_FUNCS(fgetpos fsetpos fseek ftell)
AC_CHECK_FUNCS(vsnprintf _vsnprintf)
AC_CHECK_FUNCS(snprintf  _snprintf )  
AC_CHECK_FUNCS(popen     _popen )  
AC_CHECK_FUNCS(pclose    _pclose )  
AC_CHECK_FUNCS(setenv unsetenv)
AC_CHECK_FUNCS(sigprocmask)  
AC_CHECK_FUNCS(getrusage)
AC_CHECK_FUNCS(times)
AC_CHECK_FUNCS(isatty)
AC_CHECK_FUNCS(fstat lstat)
AC_CHECK_FUNCS(select)
AC_CHECK_FUNCS(getclock)
AC_CHECK_FUNCS(gettimeofday)
AC_CHECK_FUNCS(ftime)
AC_CHECK_FUNCS(time)
AC_CHECK_FUNCS(localtime)
AC_CHECK_FUNCS(gmtime)
AC_CHECK_FUNCS(mktime)
AC_CHECK_FUNCS(readdir_r)

dnl--------------------------------------------------------------------
dnl
dnl Timezonery
dnl
dnl--------------------------------------------------------------------

AC_STRUCT_TIMEZONE
FPTOOLS_HAVE_TIMEZONE
FPTOOLS_HAVE_ALTZONE

dnl This always fails unless you also #include <windows.h>
dnl AC_CHECK_FUNCS(GetModuleFileName GetModuleFileNameA)      dnl Windows

dnl Probably Macintosh specific
dnl AC_CHECK_FUNCS(getfinfo)

AC_FUNC_ALLOCA   dnl Also sets STACK_DIRECTION

dnl Visual C++ doesn't have alloca, does have _alloca macro
AC_CACHE_CHECK(for _alloca, ac_cv_c__alloca,
[AC_TRY_LINK([
#include <malloc.h>
int test1() {
    return _alloca(42);
}
],
[int i;], 
ac_cv_c__alloca=yes,
ac_cv_c__alloca=no)])
if test "$ac_cv_c__alloca" = yes; then
AC_DEFINE(HAVE__ALLOCA)
fi

dnl Library functions used in C interface Foreign/test.ss (non-essential)

AC_CHECK_FUNCS(stime poly)

dnl--------------------------------------------------------------------
dnl
dnl Check for typedefs, structures, and compiler characteristics
dnl
dnl--------------------------------------------------------------------


AC_C_CONST               dnl can we use "const"?
AC_C_PROTOTYPES          dnl can we use function prototypes?
AC_C_JMPBUF_ARRAY        dnl can we take address of jmpbufs?
AC_C_LABELS_AS_VALUES    dnl can we use gcc's "labels as values" feature?

dnl AC_C_CHAR_UNSIGNED   dnl We can test for signed/unsigned chars - but don't use it

AC_STRUCT_TM

dnl We don't test for this because Borland C uses a typedef to define size_t
dnl but puts it in stdio.h - this conflicts with defining it in config.h
dnl AC_TYPE_SIZE_T

dnl Foo: assumes we can use prototypes.
dnl On BCC, signal handlers have type "int(void)", elsewhere its "void(int)".
dnl AC_CACHE_CHECK([type of signal handlers], ac_cv_type_signal_handler,
dnl [AC_TRY_COMPILE([#include <sys/types.h>
dnl #include <signal.h>
dnl #ifdef signal
dnl #undef signal
dnl #endif
dnl void (*signal (int, void (*)(int)))(int);
dnl ],
dnl [int i;], 
dnl ac_cv_type_signal_handler=void_int,
dnl ac_cv_type_signal_handler=int_void)])
dnl if test "$ac_cv_type_signal_handler" = void_int; then
dnl AC_DEFINE(VOID_INT_SIGNALS)
dnl fi

dnl On BCC, signal handlers have type "int(void)", elsewhere its "void(int)".
AC_TYPE_SIGNAL
if test "$ac_cv_type_signal" = void; then
AC_DEFINE(VOID_INT_SIGNALS)
fi


dnl--------------------------------------------------------------------
dnl
dnl Check Configuration options
dnl
dnl--------------------------------------------------------------------


AC_ARG_ENABLE(path-canonicalization,[  --enable-path-canonicalization enable filepath canonicalization],AC_DEFINE(PATH_CANONICALIZATION))
AC_ARG_WITH(preprocessor,       [  --with-preprocessor       use a preprocessor], AC_DEFINE(USE_PREPROCESSOR))
AC_ARG_ENABLE(timer,            [  --enable-timer            enable evaluation timing])
AC_ARG_ENABLE(profiling,        [  --enable-profiling        enable heap profiler],             AC_DEFINE(PROFILING))
AC_ARG_ENABLE(stack-dumps,      [  --enable-stack-dumps      enable stack dump on stack overflow],AC_DEFINE(GIMME_STACK_DUMPS))
AC_ARG_WITH(nmake,              [  --with-nmake              produce nmake compatible Makefile],RM="del";CP="copy")
AC_ARG_ENABLE(large-banner,     [  --disable-large-banner    disable multiline startup banner], AC_DEFINE(SMALL_BANNER))
AC_ARG_WITH(gui,                [  --with-gui                build Hugs for Windows GUI])
AC_ARG_ENABLE(internal-prims,   [  --enable-internal-prims   experimental primitives to access Hugs' innards],AC_DEFINE(INTERNAL_PRIMS) AC_DEFINE(BYTECODE_PRIMS))
AC_ARG_ENABLE(debug,            [  --enable-debug            include C debugging information (for debugging use)],AC_DEFINE(DEBUG_CODE) AC_DEFINE(DEBUG_PRINTER))
AC_ARG_ENABLE(tag-checks,       [  --enable-tag-checks       runtime tag checking (for debugging use)],AC_DEFINE(CHECK_TAGS))
AC_ARG_ENABLE(lint,             [  --enable-lint             enable "lint" flags (for debugging use)])
AC_ARG_ENABLE(only98,		[  --enable-only98           make Hugs Haskell 98 only], AC_DEFINE(HASKELL_98_ONLY))
AC_ARG_WITH(pthreads,           [  --with-pthreads           build Hugs using pthreads C library], AC_DEFINE(DONT_PANIC) MTCFLAGS="-D_REENTRANT"; LIBS="$LIBS -lpthread")
AC_ARG_WITH(fptools,		[  --with-fptools=<dir>      location of fptools directory to get libraries from], [FPTOOLS="$withval"], [FPTOOLS=../../fptools])
AC_ARG_ENABLE(ffi,		[  --enable-ffi              include modules that use the FFI], , [enable_ffi="$dynamic_loading"])

AC_SUBST(FPTOOLS)
AC_SUBST(FFI_LIBRARIES)

AC_MSG_CHECKING([directory $FPTOOLS])
if test -d "$FPTOOLS/hslibs" && test -d "$FPTOOLS/libraries"
then AC_MSG_RESULT([looks ok])
else AC_MSG_RESULT(failed)
     AC_MSG_ERROR([
The argument to --with-fptools must be a directory containing copies of
hslibs and libraries from the Haskell CVS repository.])
fi

if test "$enable_ffi" = yes; then
  FFI_LIBRARIES=ffi_libraries
else
  FFI_LIBRARIES=
fi

dnl--------------------------------------------------------------------
dnl 
dnl Readline - based on the feature testing that the GHC fptools/ configure
dnl            script performs.
dnl
dnl--------------------------------------------------------------------
AC_CHECK_LIB(ncurses, tputs, HaveLibTermcap=YES; LibTermcap=ncurses,
  AC_CHECK_LIB(termcap, tputs, HaveLibTermcap=YES; LibTermcap=termcap,
    AC_CHECK_LIB(curses, tputs, HaveLibTermcap=YES; LibTermcap=curses,
      HaveLibTermcap=NO)))
if test $HaveLibTermcap = YES ; then
    LIBS="-l$LibTermcap $LIBS"
fi

AC_CHECK_LIB(readline, readline, HaveLibReadline=YES; LibReadline=readline,
  AC_CHECK_LIB(editline, readline, HaveLibReadline=YES; LibReadline=editline,
    HaveLibReadline=NO))
if test $HaveLibTermcap = YES && test $HaveLibReadline = YES ; then
    LIBS="-l$LibReadline $LIBS"
    AC_DEFINE(USE_READLINE,1)
else	
    AC_DEFINE(USE_READLINE,0)
fi

dnl--------------------------------------------------------------------
dnl
dnl Profiling
dnl
dnl--------------------------------------------------------------------
if test "$enable_profiling" = yes; then
    if test "$have_hp2ps" = "0"; then
        AC_MSG_WARN(
[hp2ps (heap profile display program) not available 
(not ignoring --enable-profiling)])
    fi
fi

dnl--------------------------------------------------------------------
dnl
dnl Timer
dnl
dnl--------------------------------------------------------------------
if test "$enable_timer" = yes; then
    if test "$ac_cv_header_time" = yes; then
        AC_DEFINE(WANT_TIMER)
    elif test "$ac_cv_header_sys_time = yes && $ac_cv_header_sys_resource = yes"; then
        AC_DEFINE(WANT_TIMER)
    else
        AC_MSG_WARN(
[neither <time.h> nor (<sys/time.h> and <sys/resource.h>) is available
(ignoring --enable-timer)])
    fi
fi

dnl These flags are gcc specific.  
dnl They detecting many common programming errors but can get fooled
dnl by perfectly safe code so we usually turn them off.
dnl We don't use -Wstrict-prototypes because some definitions in 
dnl storage.h tickle this flag and can't be rewritten the 'correct' way
dnl without generating a warning/error from Microsoft's compiler.
GCC_LINT_FLAGS="-Wall \
  -Wpointer-arith -Wbad-function-cast -Wcast-qual \
  -Wmissing-prototypes \
  -Wmissing-declarations -Wnested-externs \
  -Wno-parentheses \
  "

dnl--------------------------------------------------------------------
dnl
dnl Lint flags
dnl
dnl--------------------------------------------------------------------
if test "$enable_lint" = yes; then
    if test "$CC" = "gcc"; then
        LINT_FLAGS="$GCC_LINT_FLAGS"
#    elif test "$CC" = "bcc32"; then
#        LINT_FLAGS="$BCC32_LINT_FLAGS"
    else
        AC_MSG_WARN(dnl
[lint flags only defined for gcc (at present)
(ignoring --enable-lint)])
    fi

    CFLAGS="$CFLAGS $LINT_FLAGS"
    dnl AC_MSG_WARN(using lint $CFLAGS)
fi

dnl--------------------------------------------------------------------
dnl
dnl Debugging flags (assumed to be mutually exclusive with optimisation)
dnl
dnl--------------------------------------------------------------------
if test "$enable_debug" = yes; then
    OPTFLAGS=""
else
    DEBUGFLAGS=""
    LDDEBUGFLAGS=""
fi
AC_SUBST(OPTFLAGS)
AC_SUBST(DEBUGFLAGS)
AC_SUBST(LDDEBUGFLAGS)
AC_SUBST(MTCFLAGS)

dnl--------------------------------------------------------------------
dnl
dnl Figure out sizes of objects and decide which version of Hugs to build
dnl
dnl--------------------------------------------------------------------

AC_CHECK_SIZEOF(int,4)
AC_CHECK_SIZEOF(float,4)
AC_CHECK_SIZEOF(double,8)
AC_CHECK_SIZEOF(int*,4)

if test "$ac_cv_sizeof_int" -eq "2"; then
    AC_DEFINE(SMALL_HUGS)
else
    dnl ToDo: test for virtual memory - if you have it, LARGE_HUGS is cool
    dnl also: provide a way to override default
    if test 0 -eq 1; then
        echo "building regular hugs"
        AC_DEFINE(REGULAR_HUGS)
    else
        echo "building large hugs"
        AC_DEFINE(LARGE_HUGS)
    fi
fi


dnl--------------------------------------------------------------------
dnl
dnl Figure out how to do dynamic linking.
dnl
dnl It is fairly easy to do the dynamic loading: that is fairly well 
dnl documented and only depends on the target platform.
dnl 
dnl It is also fairly easy to decide whether or not to add a leading 
dnl underscore to symbol names when doing symbol lookup.
dnl
dnl But it is bloody hard to figure out how to _build_ a file which can be
dnl dynamically loaded because it varies with both the platform and the
dnl choice of linker.  So we use a rather crude approach: we try every
dnl set of linking commands that anyone suggests will work.
dnl
dnl At the time of writing, I have no idea which of these tests will work.
dnl I don't want to add flags that are obviously silly but I want to
dnl record what is worth trying.  So, for now, I'm going to leave all
dnl the untested ones commented out.  As platforms are found which need
dnl those flags, we'll uncomment each line (and maybe even record which
dnl platforms those are).
dnl
dnl--------------------------------------------------------------------

dnl Try the MS Visual C flags
HUGS_TRY_DYNLINK([/LD])
HUGS_TRY_DYNLINK([/LD /ML /nologo])

dnl Try the gcc flags
HUGS_TRY_DYNLINK([-shared -fPIC])

dnl Try the MacOS X flags
HUGS_TRY_DYNLINK(-bundle)

dnl Try the MacOS X flags
HUGS_TRY_DYNLINK([-bundle -lc])        

dnl Try the gcc flags
dnl HUGS_TRY_DYNLINK([-shared -nostdlib])

dnl Some other gcc flags
HUGS_TRY_DYNLINK(-r)

dnl Some other gcc flags
dnl HUGS_TRY_DYNLINK(-rdynamic)

dnl Try the SunOS flags
dnl HUGS_TRY_DYNLINK(-G)

dnl Try the HPUX flags
dnl HUGS_TRY_DYNLINK([-Aa +z])             

AC_DEFINE_UNQUOTED(MKDLL_CMD, "${CC-cc} $ac_cv_dll_flags")
if test "$ac_cv_leading_underscore" = "yes"; then
AC_DEFINE(LEADING_UNDERSCORE)
fi

dnl--------------------------------------------------------------------
dnl
dnl Architecture specific substitutions
dnl The default values can be overridden by environment variables when
dnl the configure script is called
dnl
dnl--------------------------------------------------------------------

dnl When building a Windows script, $target will be set to "windows".

if test "x$target" = "xwindows"; then
    EXE=".exe"          
    OBJ=".obj"          
    DLL=".dll"          
    DLL_ENDING="-dll"   
    DEV_NULL="nul"
    HUGSPATH="{Hugs}\\\\libraries;{Hugs}\\\\oldlib;{Hugs}\\\\lib\\\\win32"
    HUGSSUFFIXES=".hs;.lhs"
    MkInstall="../MkNull.in"
elif test "x$target" = "xdos"; then
    # Just the same as for Windows but excludes win32 from Path
    EXE=".exe"          
    OBJ=".obj"          
    DLL=".dll"          
    DLL_ENDING="-dll"   
    DEV_NULL="nul"
    hugsdir_deflt='${libdir}\\hugs'
    HUGSPATH="{Hugs}\\\\libraries;{Hugs}\\\\oldlib"
    HUGSSUFFIXES=".hs;.lhs"
    MkInstall="../MkNull.in"
else
    hugsdir_deflt='${libdir}/hugs'
    HUGSPATH="{Hugs}/libraries:{Hugs}/oldlib"
    HUGSSUFFIXES=".hs:.lhs"
    MkInstall="../MkInstal.in"
fi
AC_SUBST(HUGSPATH)
AC_SUBST(HUGSSUFFIXES)
AC_DEFINE_UNQUOTED(HUGSSUFFIXES,"$HUGSSUFFIXES")

if test "x$prefix" = xNONE; then
    prefix="$ac_default_prefix"
fi

AC_SUBST_DEF(hugsdir,"$hugsdir_deflt")

test "x$prefix"      = xNONE && prefix=$ac_default_prefix
test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'

dnl This is the only way I could find to perform the substitutions
dnl in hugsdir.  Sigh.
HUGSDIR=`sh -c "prefix=$prefix; exec_prefix=$exec_prefix; libdir=$libdir; datadir=$datadir; echo $hugsdir"`
AC_DEFINE_UNQUOTED(HUGSDIR,"$HUGSDIR")
AC_SUBST(HUGSDIR)
BINDIR=`sh -c "prefix=$prefix; exec_prefix=$exec_prefix; echo $bindir"`
AC_SUBST(BINDIR)

if test "x$target" = "xwindows"; then
  SET_INSTALLDIRS=""
elif test "x$target" = "xdos"; then
  SET_INSTALLDIRS=""
else
  SET_INSTALLDIRS="\
# These variables determine where various parts of the Hugs system are\\
# installed.  (They are ignored in Windows or DOS.)\\
# Binaries are installed in \$(bindir); libraries go in \$(hugsdir)/libraries\\
prefix		= $prefix\\
exec_prefix	= $exec_prefix\\
bindir		= $bindir\\
libdir		= $libdir\\
datadir		= $datadir\\
mandir          = $mandir\\
hugsdir		= $hugsdir\\
"
fi
AC_SUBST(SET_INSTALLDIRS)

AC_SUBST_DEF(EXE,"")
AC_SUBST_DEF(OBJ,".o")
AC_SUBST_DEF(DLL,".so")
AC_SUBST_DEF(DLL_ENDING,"-so")
AC_SUBST_DEF(DEV_NULL,"/dev/null")
AC_SUBST_DEF(RM,"/bin/rm -f")
AC_SUBST_DEF(CP,"/bin/cp")
AC_SUBST_FILE(MkInstall)  
MkDepend=../MkDepend.in
AC_SUBST_FILE(MkDepend)  

AC_DEFINE_UNQUOTED(HUGSPATH,"${HUGSPATH}")

dnl--------------------------------------------------------------------
dnl
dnl Figure out whether we can build the GUI
dnl (done last because -W flags messes everything else up)
dnl
dnl--------------------------------------------------------------------

if test "x$with_gui" = xyes; then
  if test "x$target" = "xwindows"; then
    LDFLAGS="$LDFLAGS -W"
    WOBJECTS="win-text.obj"
    STRIP="brc32 hugs32.rc hugs.exe -w32"
    RC_FILES="hugs32.rc"
    AC_DEFINE(HUGS_FOR_WINDOWS)
  elif test "x$target" = "xdos"; then
    WOBJECTS="win-text.obj"
    STRIP="brc hugs16.rc hugs.exe"
    RC_FILES="hugs16.rc"
    AC_DEFINE(HUGS_FOR_WINDOWS)
  else
    AC_MSG_WARN(
[not building Hugs GUI because this isn't a DOS machine
    ])
  fi
fi
AC_SUBST_DEF(WOBJECTS,"")
AC_SUBST_DEF(RC_FILES,"")
AC_SUBST_DEF(STRIP,"")

dnl--------------------------------------------------------------------
dnl
dnl Generate output files
dnl
dnl--------------------------------------------------------------------

TESTSCRIPT=""
if test -f ../../tests/config.in ; then
 TESTSCRIPT=../../tests/config
fi

AC_OUTPUT(../Makefile ../../docs/Makefile \
	../../docs/hugs.1 $TESTSCRIPT hugs-package)

echo ''
echo '************************************************'
echo '*** NOW DO: cd .. ; make ; make install'
echo '************************************************'
exit 0

dnl End of configure.in
