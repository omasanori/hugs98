dnl ################################################################
dnl Process this file with autoconf to produce a configure script.
dnl
dnl $RCSfile: configure.in,v $
dnl $Revision: 1.1 $
dnl $Date: 1999/06/07 23:53:39 $
dnl ################################################################

AC_INIT(../hugs.c)
AC_CONFIG_HEADER(../config.h ../options.h)

dnl ################################################################
dnl Check for programs
dnl ################################################################

dnl ToDo: if we have YACC, insert parser.c: parser.y in Makefile
AC_PROG_YACC
AC_PROG_CC
AC_PROG_CPP
AC_CHECK_PROGS(PERL,perl)  dnl should test for perl5
AC_PROG_MAKE_SET
AC_CHECK_PROG(have_hp2ps,hp2ps,1,0)
if test "$have_hp2ps" = "1"; then
AC_DEFINE(HAVE_HP2PS,1)
fi

dnl AC_PROG_INSTALL

dnl POSIX systems prefer "diff -C 1"; SunOS4 prefers "diff -c1".
AC_PROG_DIFF

dnl If you can run configure, you certainly have /bin/sh
AC_DEFINE(HAVE_BIN_SH)

dnl ################################################################
dnl Check for libraries
dnl ################################################################

AC_CHECK_LIB_NOWARN(dl, dlopen)
AC_CHECK_LIB_NOWARN(dld, shl_load)
AC_CHECK_LIB_NOWARN(m, atan)

dnl ################################################################
dnl Check for header files
dnl ################################################################

AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(
  stdarg.h stdlib.h unistd.h assert.h ctype.h string.h \
  fcntl.h sgtty.h termio.h termios.h signal.h \
  sys/stat.h sys/types.h sys/ioctl.h sys/resource.h sys/param.h \
  console.h pascal.h Files.h errno.h stat.h nlist.h ftw.h
  )

AC_HEADER_TIME
AC_CHECK_HEADERS(time.h sys/time.h)

dnl One of these two is used to obtain floating point parameters
AC_CHECK_HEADERS(float.h values.h)

dnl DOS include files
AC_CHECK_HEADERS(dos.h conio.h io.h std.h) 

dnl Windows include files
AC_CHECK_HEADERS(windows.h)

dnl dynamic loading include files
AC_CHECK_HEADERS(dlfcn.h dl.h) 

dnl Checks for:
dnl   farcalloc (in bcc), 
dnl   valloc (in sunos, solaris, mips, amiga, next, minix, ultrix)
AC_CHECK_HEADER(alloc.h,AC_CHECK_FUNCS(farcalloc))
AC_CHECK_HEADER(malloc.h,AC_CHECK_FUNCS(valloc))

dnl ################################################################
dnl Check for library functions.
dnl ################################################################

dnl Old: AC_CHECK_FUNCS(WinExec GetModuleFileName)       dnl Windows
dnl Doesn't work because the linker can't see the functions if
dnl you omit the #include <windows.h>.  (I've no idea why not...)

AC_TRY_LINK_NOWARN(,[
#if HAVE_WINDOWS_H
#include <windows.h>
#endif
main() { 
  WinExec("",0);
  exit(0);
}
],
[have_winexec=1],
[have_winexec=0])
if test "$have_winexec" = "1"; then
AC_DEFINE(HAVE_WINEXEC)
fi

AC_TRY_LINK_NOWARN(,[
#if HAVE_WINDOWS_H
#include <windows.h>
#endif
main() { 
  char* dir;
  GetModuleFileName((HMODULE)0,dir,0);
  exit(0);
}
],
[have_getmodulefilename=1],
[have_getmodulefilename=0])
if test "$have_getmodulefilename" = "1"; then
AC_DEFINE(HAVE_GETMODULEFILENAME)
fi

AC_CHECK_FUNCS(strcasecmp _stricmp stricmp strcmpi)
AC_CHECK_FUNCS(strcmp)
AC_CHECK_FUNCS(realpath _fullpath)  
AC_CHECK_FUNCS(PBHSetVolSync macsystem)  
AC_CHECK_FUNCS(fgetpos fsetpos fseek ftell)
AC_CHECK_FUNCS(vsnprintf _vsnprintf)
AC_CHECK_FUNCS(snprintf  _snprintf )  
AC_CHECK_FUNCS(popen     _popen )  
AC_CHECK_FUNCS(pclose    _pclose )  
AC_CHECK_FUNCS(sigprocmask)  

dnl This always fails unless you also #include <windows.h>
dnl AC_CHECK_FUNCS(GetModuleFileName GetModuleFileNameA)      dnl Windows

dnl Probably Macintosh specific
dnl AC_CHECK_FUNCS(getfinfo)

AC_FUNC_ALLOCA   dnl Also sets STACK_DIRECTION

dnl Visual C++ doesn't have alloca, does have _alloca macro
AC_CACHE_CHECK(for _alloca, ac_cv_c__alloca,
[AC_TRY_LINK([
#include <malloc.h>
int test1() {
    return _alloca(42);
}
],
[int i;], 
ac_cv_c__alloca=yes,
ac_cv_c__alloca=no)])
if test "$ac_cv_c__alloca" = yes; then
AC_DEFINE(HAVE__ALLOCA)
fi

dnl Library functions used in C interface Foreign/test.ss (non-essential)

AC_CHECK_FUNCS(stime poly)

dnl ################################################################
dnl Check for typedefs, structures, and compiler characteristics
dnl ################################################################

AC_C_CONST               dnl can we use "const"?
AC_C_PROTOTYPES          dnl can we use function prototypes?
AC_C_JMPBUF_ARRAY        dnl can we take address of jmpbufs?
AC_C_LABELS_AS_VALUES    dnl can we use gcc's "labels as values" feature?

dnl AC_C_CHAR_UNSIGNED   dnl We can test for signed/unsigned chars - but don't use it

AC_STRUCT_TM

dnl We don't test for this because Borland C uses a typedef to define size_t
dnl but puts it in stdio.h - this conflicts with defining it in config.h
dnl AC_TYPE_SIZE_T

dnl Foo: assumes we can use prototypes.
dnl On BCC, signal handlers have type "int(void)", elsewhere its "void(int)".
dnl AC_CACHE_CHECK([type of signal handlers], ac_cv_type_signal_handler,
dnl [AC_TRY_COMPILE([#include <sys/types.h>
dnl #include <signal.h>
dnl #ifdef signal
dnl #undef signal
dnl #endif
dnl void (*signal (int, void (*)(int)))(int);
dnl ],
dnl [int i;], 
dnl ac_cv_type_signal_handler=void_int,
dnl ac_cv_type_signal_handler=int_void)])
dnl if test "$ac_cv_type_signal_handler" = void_int; then
dnl AC_DEFINE(VOID_INT_SIGNALS)
dnl fi

dnl On BCC, signal handlers have type "int(void)", elsewhere its "void(int)".
AC_TYPE_SIGNAL
if test "$ac_cv_type_signal" = void; then
AC_DEFINE(VOID_INT_SIGNALS)
fi

AC_PROG_GCC_TRADITIONAL

dnl ** check for leading underscores in symbol names
# We assume that they _aren't_ there if anything goes wrong.
#
echo checking for a leading underscore in symbol names
AC_TRY_RUN(
[#ifdef HAVE_NLIST_H
#include <nlist.h>
struct nlist xYzzY[] = {{"_xYzzY", 0},{0}};
#endif

main(argc, argv)
int argc;
char **argv;
{
#ifdef HAVE_NLIST_H
    if(nlist(argv[0], xYzzY) == 0 && xYzzY[0].n_value != 0)
        exit(0);
#endif
    exit(1);
}], LEADING_UNDERSCORE='YES', LEADING_UNDERSCORE='NO', LEADING_UNDERSCORE='NO')
test -n "$verbose" && echo "    setting LEADING_UNDERSCORE to $LEADING_UNDERSCORE"
if test "$LEADING_UNDERSCORE" = "YES"; then
AC_DEFINE(LEADING_UNDERSCORE)
fi

AC_CHECK_PROG(LD,ld,ld)


dnl ################################################################
dnl Check Configuration options
dnl ################################################################

AC_ARG_ENABLE(modules,          [  --disable-modules         disable module system],            AC_DEFINE(IGNORE_MODULES))
AC_ARG_ENABLE(path-canonicalization,[  --enable-path-canonicalization enable filepath canonicalization],AC_DEFINE(PATH_CANONICALIZATION))
AC_ARG_WITH(readline,           [  --with-readline           support fancy command line editing])
AC_ARG_WITH(preprocessor,       [  --with-preprocessor       use a preprocessor], AC_DEFINE(USE_PREPROCESSOR))
AC_ARG_ENABLE(timer,            [  --enable-timer            enable evaluation timing])
AC_ARG_ENABLE(profiling,        [  --enable-profiling        enable heap profiler],             AC_DEFINE(PROFILING))
AC_ARG_ENABLE(stack-dumps,      [  --enable-stack-dumps      enable stack dump on stack overflow],AC_DEFINE(GIMME_STACK_DUMPS))
AC_ARG_WITH(nmake,              [  --with-nmake              produce nmake compatible Makefile],RM="del";CP="copy")
AC_ARG_ENABLE(large-banner,     [  --disable-large-banner    disable multiline startup banner], AC_DEFINE(SMALL_BANNER))
AC_ARG_ENABLE(TREX,             [  --enable-TREX             enable Typed Records and Extensions], AC_DEFINE(TREX))
AC_ARG_ENABLE(IPARAM,           [  --enable-IPARAM           enable implicit parameters], AC_DEFINE(IPARAM))
AC_ARG_WITH(gui,                [  --with-gui                build Hugs for Windows GUI])
AC_ARG_ENABLE(internal-prims,   [  --enable-internal-prims   experimental primitives to access Hugs' innards],AC_DEFINE(INTERNAL_PRIMS) AC_DEFINE(BYTECODE_PRIMS))
AC_ARG_ENABLE(debug,            [  --enable-debug            include C debugging information (for debugging use)],AC_DEFINE(DEBUG_CODE) AC_DEFINE(DEBUG_PRINTER))
AC_ARG_ENABLE(tag-checks,       [  --enable-tag-checks       runtime tag checking (for debugging use)],AC_DEFINE(CHECK_TAGS))
AC_ARG_ENABLE(lint,             [  --enable-lint             enable "lint" flags (for debugging use)])


dnl Disabled for now because the plugin-code can't handle the change.
dnl If you're not using plugins, you could turn this on manually
dnl by setting "USE_DOUBLE_PRECISION" in options.h.in (before running
dnl the configure script).
dnl AC_ARG_ENABLE(double-precision, [  --enable-double-precision use double precision arithmetic],  AC_DEFINE(USE_DOUBLE_PRECISION))

dnl Readline
dnl
if test "$with_readline" = yes; then
    use_readline=no
    TERMCAP=no
    AC_CHECK_LIB(ncurses,main,TERMCAP="-lncurses",,)
    if test "$ac_cv_lib_ncurses_main" = no; then
        AC_CHECK_LIB(termcap,main,TERMCAP="-ltermcap",,)
    fi
    if test "$TERMCAP" != no; then
        AC_CHECK_LIB(readline,readline,LIBS="-lreadline $TERMCAP $LIBS",,$TERMCAP)
        if test "$ac_cv_lib_readline_readline" = yes; then
	    use_readline=yes
	fi
    fi
    if test "$use_readline" = no; then
	    AC_CHECK_LIB(editline,readline,)
            use_readline="$ac_cv_lib_editline_readline"
    fi
    if test "$use_readline" = yes; then
	AC_DEFINE(USE_READLINE)
    else
        AC_MSG_WARN(
[readline and editline packages not available 
(ignoring --with-readline)])
    fi
fi

dnl Profiling
dnl
if test "$enable_profiling" = yes; then
    if test "$have_hp2ps" = "0"; then
        AC_MSG_WARN(
[hp2ps (heap profile display program) not available 
(not ignoring --enable-profiling)])
    fi
fi

dnl Timer
dnl
if test "$enable_timer" = yes; then
    if test "$ac_cv_header_time" = yes; then
        AC_DEFINE(WANT_TIMER)
    elif test "$ac_cv_header_sys_time = yes && $ac_cv_header_sys_resource = yes"; then
        AC_DEFINE(WANT_TIMER)
    else
        AC_MSG_WARN(
[neither <time.h> nor (<sys/time.h> and <sys/resource.h>) is available
(ignoring --enable-timer)])
    fi
fi

dnl These flags are gcc specific.  
dnl They detecting many common programming errors but can get fooled
dnl by perfectly safe code so we usually turn them off.
GCC_LINT_FLAGS="-Wall \
  -Wpointer-arith -Wbad-function-cast -Wcast-qual \
  -Wstrict-prototypes -Wmissing-prototypes \
  -Wmissing-declarations -Wnested-externs \
  -Wno-parentheses \
  "

CFLAGS="-g"
OPTFLAGS="-O2"

dnl Lint flags
dnl
if test "$enable_lint" = yes; then
    if test "$ac_cv_prog_CC" = "gcc"; then
        LINT_FLAGS="$GCC_LINT_FLAGS"
#    elif test "$ac_cv_prog_CC" = "bcc32"; then
#        LINT_FLAGS="$BCC32_LINT_FLAGS"
    else
        AC_MSG_WARN(dnl
[lint flags only defined for gcc (at present)
(ignoring --enable-lint)])
    fi

    CFLAGS="$CFLAGS $LINT_FLAGS"
    dnl AC_MSG_WARN(using lint $CFLAGS)
fi

dnl Debugging flags (assumed to be mutually exclusive with optimisation)
dnl
if test "$enable_debug" = yes; then
    OPTFLAGS=""
else
    DEBUGFLAGS=""
    LDDEBUGFLAGS=""
fi
AC_SUBST(OPTFLAGS)
AC_SUBST(DEBUGFLAGS)
AC_SUBST(LDDEBUGFLAGS)

dnl Figure out sizes of objects and decide which version of Hugs to build

AC_CHECK_SIZEOF(int,4)
AC_CHECK_SIZEOF(float,4)
AC_CHECK_SIZEOF(double,8)
AC_CHECK_SIZEOF(int*,4)

if test "$ac_cv_sizeof_int" -eq "2"; then
    AC_DEFINE(SMALL_HUGS)
else
    dnl ToDo: test for virtual memory - if you have it, LARGE_HUGS is cool
    dnl also: provide a way to override default
    if test 0 -eq 1; then
        echo "building regular hugs"
        AC_DEFINE(REGULAR_HUGS)
    else
        echo "building large hugs"
        AC_DEFINE(LARGE_HUGS)
    fi
fi


dnl ################################################################
dnl Figure out how to do dynamic linking
dnl ################################################################

dnl NOT used anymore - it's just too unreliable.
dnl Moved the comments listing different options for each system
dnl to ../../Install
dnl
dnl How do we build a dll or shareable object file?
dnl
dnl if test "$with_plugins" = yes; then
dnl 
dnl   AC_CACHE_CHECK(for dll/shared object file flags,ac_cv_DLL_FLAGS,
dnl   [
dnl 	  dnl Try the gcc flags
dnl 	  AC_TRY_LINK_NOWARN("-shared -nostdlib",[],
dnl 	    ac_cv_DLL_FLAGS="-shared -nostdlib",
dnl 	  AC_TRY_LINK_NOWARN("-r",[],
dnl 	    ac_cv_DLL_FLAGS="-r",
dnl 	  AC_TRY_LINK_NOWARN("/LD",[],
dnl 	    ac_cv_DLL_FLAGS="/LD",
dnl 	    ac_cv_DLL_FLAGS="$DLL_FLAGS"
dnl 	  )))
dnl   ])
dnl   DLL_FLAGS="$ac_cv_DLL_FLAGS";
dnl 
dnl fi

AC_SUBST(PIC_FLAGS) 
AC_SUBST(DLL_FLAGS) 

dnl ################################################################
dnl Architecture specific substitutions
dnl The default values can be overridden by environment variables when
dnl the configure script is called
dnl ################################################################

dnl When building a Windows script, $target will be set to "windows".

if test "x$target" = "xwindows"; then
    EXE=".exe"          
    OBJ=".obj"          
    DLL=".dll"          
    DLL_ENDING="-dll"   
    DEV_NULL="nul"
    HUGSPATH="{Hugs}\\\\lib;{Hugs}\\\\lib\\\\hugs;{Hugs}\\\\lib\\\\exts;{Hugs}\\\\lib\\\\win32"
    MkInstall="../MkNull.in"
elif test "x$target" = "xdos"; then
    # Just the same as for Windows but excludes win32 from Path
    EXE=".exe"          
    OBJ=".obj"          
    DLL=".dll"          
    DLL_ENDING="-dll"   
    DEV_NULL="nul"
    hugsdir_deflt='${datadir}\\hugs'
    HUGSPATH="{Hugs}\\\\lib;{Hugs}\\\\lib\\\\hugs;{Hugs}\\\\lib\\\\exts"
    MkInstall="../MkNull.in"
else
    hugsdir_deflt='${datadir}/hugs'
    HUGSPATH="{Hugs}/lib:{Hugs}/lib/hugs:{Hugs}/lib/exts"
    MkInstall="../MkInstal.in"
fi

if test "x$prefix" = xNONE; then
    prefix="$ac_default_prefix"
fi

AC_SUBST_DEF(hugsdir,"$hugsdir_deflt")

test "x$prefix"      = xNONE && prefix=$ac_default_prefix
test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'

dnl This is the only way I could find to perform the substitutions
dnl in hugsdir.  Sigh.
HUGSDIR=`sh -c "prefix=$prefix; datadir=$datadir; hugsdir=$hugsdir; echo $hugsdir"`
AC_DEFINE_UNQUOTED(HUGSDIR,"$HUGSDIR")

if test "x$target" = "xwindows"; then
  SET_INSTALLDIRS=""
elif test "x$target" = "xdos"; then
  SET_INSTALLDIRS=""
else
  SET_INSTALLDIRS="\
# These variables determine where various parts of the Hugs system are\\
# installed.  (They are ignored in Windows or DOS.)\\
# Binaries are installed in \$(bindir), libraries in \$(datadir)/lib\\
prefix		= $prefix\\
exec_prefix	= $exec_prefix\\
bindir		= $bindir\\
datadir		= $datadir\\
hugsdir		= $hugsdir\\
"
fi
AC_SUBST(SET_INSTALLDIRS)

AC_SUBST_DEF(EXE,"")
AC_SUBST_DEF(OBJ,".o")
AC_SUBST_DEF(DLL,".so")
AC_SUBST_DEF(DLL_ENDING,"-so")
AC_SUBST_DEF(DEV_NULL,"/dev/null")
AC_SUBST_DEF(RM,"/bin/rm -f")
AC_SUBST_DEF(CP,"/bin/cp")
AC_SUBST_FILE(MkInstall)  

AC_DEFINE_UNQUOTED(HUGSPATH,"${HUGSPATH}")

dnl ################################################################
dnl Figure out whether we can build the GUI
dnl (done last because -W flags messes everything else up)
dnl ################################################################

if test "x$with_gui" = xyes; then
  if test "x$target" = "xwindows"; then
    LDFLAGS="$LDFLAGS -W"
    WOBJECTS="win-text.obj"
    STRIP="brc32 hugs32.rc hugs.exe -w32"
    RC_FILES="hugs32.rc"
    AC_DEFINE(HUGS_FOR_WINDOWS)
  elif test "x$target" = "xdos"; then
    WOBJECTS="win-text.obj"
    STRIP="brc hugs16.rc hugs.exe"
    RC_FILES="hugs16.rc"
    AC_DEFINE(HUGS_FOR_WINDOWS)
  else
    AC_MSG_WARN(
[not building Hugs GUI because this isn't a DOS machine
    ])
  fi
fi
AC_SUBST_DEF(WOBJECTS,"")
AC_SUBST_DEF(RC_FILES,"")
AC_SUBST_DEF(STRIP,"")

dnl ################################################################
dnl Generate output files
dnl ################################################################

dnl AC_OUTPUT(../Makefile)
AC_OUTPUT(../Makefile)

echo ''
echo '************************************************'
echo '*** NOW DO: cd .. followed by make install'
echo '************************************************'
exit 0

dnl End of configure.in
