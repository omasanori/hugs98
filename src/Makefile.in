# --------------------------------------------------------------------------
# Makefile for Hugs
#
# The Hugs 98 system is Copyright (c) Mark P Jones, Alastair Reid, the
# Yale Haskell Group, and the OGI School of Science & Engineering at OHSU,
# 1994-2002, All rights reserved.  It is distributed as
# free software under the license in the file "License", which is
# included in the distribution.
# --------------------------------------------------------------------------

# Targets:
#
# <default>:   	 make hugs@EXE@ and runhugs@EXE@
# libraries:	 generate libraries from fptools raw sources
#		 (located in $(FPTOOLS))
# install:	 make and install programs/libraries
# hugs@EXE@:    	 make minimal working system
# runhugs@EXE@:	 make batch-mode version of Hugs
# clean:       	 delete files not required in running system
# distclean:     delete files that can be regenerated using C compiler
# veryclean:     delete all machine generated files 
#                  (you need perl, bison/yacc, etc to rebuild these files)
# check:	 run regression tests
# TAGS:          build emacs TAGS table

# This rule goes first to make it the default choice
default		:: hugs@EXE@ runhugs@EXE@ libraries

CC		= @CC@
CFLAGS		= @CFLAGS@ @DEBUGFLAGS@ @MTCFLAGS@
OPTFLAGS	= @OPTFLAGS@

LD		= @LD@
LDFLAGS    	= @LDFLAGS@  @LDDEBUGFLAGS@
LIBS		= @LIBS@

YACC		= @YACC@
RM		= @RM@
CP		= @CP@
EXE		= @EXE@

FPTOOLS		= @FPTOOLS@

BUILD_DIR	= ../hugsdir

# a file created by make libraries
LIBRARIES	= $(BUILD_DIR)/libraries/Prelude.hs

# a file created by make include
INCLUDE		= $(BUILD_DIR)/include/HsFFI.h

@SET_INSTALLDIRS@

.SUFFIXES	:
.SUFFIXES	: .c .h @OBJ@
HFILES		= HsFFI.h builtin.h command.h config.h connect.h errors.h \
		  evaluator.h goal.h machdep.h module.h observe.h options.h \
		  opts.h output.h prelude.h script.h server.h storage.h \
		  strutil.h subst.h
CFILES		= hugs.c runhugs.c server.c \
		  builtin.c compiler.c errors.c evaluator.c ffi.c goal.c input.c \
		  machdep.c machine.c module.c observe.c opts.c output.c \
		  plugin.c script.c static.c storage.c \
		  strutil.c subst.c type.c version.c
INCFILES	= parser.c preds.c bignums.c timer.c scc.c \
		  printer.c iomonad.c interns.c stmonad.c array.c
YFILES		= parser.y
SOURCES		= $(HFILES) $(CFILES) $(INCFILES) $(YFILES) 
OBJECTS		= builtin@OBJ@ compiler@OBJ@ errors@OBJ@ evaluator@OBJ@ \
		  ffi@OBJ@ goal@OBJ@ input@OBJ@ machdep@OBJ@ machine@OBJ@ \
		  module@OBJ@ opts@OBJ@ output@OBJ@ plugin@OBJ@ script@OBJ@ \
		  static@OBJ@ storage@OBJ@ strutil@OBJ@ subst@OBJ@ \
		  type@OBJ@ version@OBJ@
IOBJECTS	= hugs@OBJ@ server@OBJ@ observe@OBJ@ $(OBJECTS)
PRELUDE		= config.h options.h prelude.h script.h

HEADERS		= HsFFI.h

################################################################
# Hugs interpreter and standalone evaluator
################################################################

hugs@EXE@	: $(IOBJECTS) @WOBJECTS@ @RC_FILES@
		  $(CC) $(LDFLAGS) $(IOBJECTS) @WOBJECTS@ $(LIBS) -o hugs@EXE@ 
		  @STRIP@

version@OBJ@	: version.c $(SOURCES)
		  @$(CC) \
		      -DMONTH_YEAR='"'"`date +'%B %Y' 2> /dev/null`"'"' \
		      -DYYYYMMDD='"'"`date +'%Y%m%d' 2> /dev/null`"'"' \
		      -c $(CFLAGS) $(OPTFLAGS) $<

SERVER_OBJECTS	= server@OBJ@ $(OBJECTS) 
runhugs@OBJ@	: $(PRELUDE) runhugs.c builtin.h observe.h server.h
runhugs@EXE@	: runhugs@OBJ@ $(SERVER_OBJECTS)
		  $(CC) $(LDFLAGS) runhugs@OBJ@ $(SERVER_OBJECTS) $(LIBS) -o runhugs@EXE@

ffihugs@OBJ@	: $(PRELUDE) runhugs.c server.h
ffihugs@EXE@	: ffihugs@OBJ@ $(SERVER_OBJECTS)
		  $(CC) $(LDFLAGS) ffihugs@OBJ@ $(SERVER_OBJECTS) $(LIBS) -o ffihugs@EXE@

ffihugs@OBJ@	: runhugs.c
		  $(CC) -c $(CFLAGS) $(OPTFLAGS) -DFFI_COMPILER runhugs.c -o ffihugs@OBJ@

################################################################
# Libraries, converted from raw sources out of the fptools tree
################################################################

libraries	:: $(LIBRARIES) @FFI_LIBRARIES@

$(LIBRARIES)	: ../libraries/Hugs/*.* unix/convert_libraries
		  mkdir -p $(BUILD_DIR)/libraries/Hugs
		  $(CP) ../libraries/Hugs/*.* $(BUILD_DIR)/libraries/Hugs
		  cd unix; ./convert_libraries $(FPTOOLS) ../../hugsdir

$(INCLUDE)	: $(HEADERS)
		  mkdir -p $(BUILD_DIR)/include
		  $(CP) $(HEADERS) $(BUILD_DIR)/include

################################################################
# Library modules that use the Foreign Function Interface
################################################################

BASIC_FFI_LIBRARIES = \
		$(BUILD_DIR)/libraries/Hugs/Storable@DLL@ \
		$(BUILD_DIR)/libraries/Foreign/Marshal/Alloc@DLL@ \
		$(BUILD_DIR)/libraries/Foreign/Marshal/Utils@DLL@ \
		$(BUILD_DIR)/libraries/Foreign/C/Error@DLL@

EXTRA_FFI_LIBRARIES = \
		$(BUILD_DIR)/libraries/Text/Regex/Posix@DLL@ \
		$(BUILD_DIR)/libraries/Network/Socket@DLL@ \
		$(BUILD_DIR)/libraries/Network/BSD@DLL@

ffi_libraries	: $(BASIC_FFI_LIBRARIES) $(EXTRA_FFI_LIBRARIES)

$(BASIC_FFI_LIBRARIES) : $(LIBRARIES) ffihugs$(EXE) $(INCLUDE)

$(EXTRA_FFI_LIBRARIES) : $(BASIC_FFI_LIBRARIES)

BUILD_FFI = env HUGSDIR='$(BUILD_DIR)' HUGSFLAGS='-W' ./ffihugs +G

# If only we could put +L options in source files ...

$(BUILD_DIR)/libraries/Hugs/Storable@DLL@ :
		  $(BUILD_FFI) +L'$(BUILD_DIR)/libraries/Hugs/Storable_aux.c' Hugs.Storable

$(BUILD_DIR)/libraries/Foreign/Marshal/Alloc@DLL@ : \
			$(BUILD_DIR)/libraries/Hugs/Storable@DLL@
		  $(BUILD_FFI) Foreign.Marshal.Alloc

$(BUILD_DIR)/libraries/Foreign/Marshal/Utils@DLL@ : \
			$(BUILD_DIR)/libraries/Hugs/Storable@DLL@ \
			$(BUILD_DIR)/libraries/Foreign/Marshal/Alloc@DLL@
		  $(BUILD_FFI) Foreign.Marshal.Utils

$(BUILD_DIR)/libraries/Foreign/C/Error@DLL@ : \
			$(BUILD_DIR)/libraries/Hugs/Storable@DLL@
		  $(BUILD_FFI) +L'$(BUILD_DIR)/libraries/Foreign/C/errno.c' Foreign.C.Error  

$(BUILD_DIR)/libraries/Text/Regex/Posix@DLL@ :
		  $(BUILD_FFI) Text.Regex.Posix

$(BUILD_DIR)/libraries/Network/Socket@DLL@ :
		  $(BUILD_FFI) +L'$(BUILD_DIR)/libraries/Network/HsNet.c' +L'$(BUILD_DIR)/libraries/Network/initWinSock.c' +L'$(BUILD_DIR)/libraries/Network/ancilData.c' Network.Socket

$(BUILD_DIR)/libraries/Network/BSD@DLL@ : \
			$(BUILD_DIR)/libraries/Network/Socket@DLL@
		  $(BUILD_FFI) Network.BSD

################################################################
# Clean, distclean, veryclean, TAGS
################################################################

clean		::
		  $(RM) hugs@EXE@
		  $(RM) runhugs@EXE@
		  $(RM) ffihugs@EXE@
		  $(RM) *.o
		  $(RM) *.O
		  $(RM) *.obj
		  $(RM) *.OBJ
		  $(RM) *.LIB
		  $(RM) *.DEF
		  $(RM) *.RES
		  $(RM) *.EXP
		  $(RM) *.ILK
		  $(RM) *.PDB
		  $(RM) *.TD2
		  $(RM) *.MAP
		  $(RM) *.CSM
		  $(RM) *.TR2
		  $(RM) *.DSW
		  $(RM) *.aux
		  $(RM) *.hp
		  $(RM) -r $(BUILD_DIR)
distclean	:: clean
distclean	::
		  $(RM) hugs@EXE@
		  $(RM) runhugs@EXE@
		  $(RM) ffihugs@EXE@
		  $(RM) *.pdf
		  $(RM) TAGS
		  $(RM) *~
veryclean	:: distclean
veryclean	::
		  $(RM) Makefile
		  $(RM) config.h
		  $(RM) options.h
		  $(RM) unix/config.cache
		  $(RM) unix/config.log
		  $(RM) unix/config.status
		  $(RM) unix/configure
TAGS		::
		  etags *.[ych]

################################################################
# Dependencies
################################################################

.c@OBJ@	:
		  $(CC) -c $(CFLAGS) $(OPTFLAGS) $<

# These are compiled with less optimisation to avoid optimisation bugs in
# certain compilers.  This may be overly conservative on some compilers.
compiler@OBJ@	: compiler.c
		  $(CC) -c $(CFLAGS) compiler.c
static@OBJ@	: static.c
		  $(CC) -c $(CFLAGS) static.c
type@OBJ@	: type.c
		  $(CC) -c $(CFLAGS) type.c

parser.c	: parser.y
		  -$(YACC) parser.y
		  mv y.tab.c parser.c
# veryclean	::
# 		  $(RM) parser.c

server@OBJ@	: $(PRELUDE) storage.h connect.h errors.h script.h \
		  machdep.h evaluator.h opts.h strutil.h server.h
hugs@OBJ@	: $(PRELUDE) storage.h connect.h errors.h command.h \
		  script.h opts.h strutil.h evaluator.h machdep.h \
		  goal.h output.h timer.c 
storage@OBJ@	: $(PRELUDE) storage.h connect.h errors.h opts.h \
		  machdep.h evaluator.h strutil.h
input@OBJ@	: $(PRELUDE) storage.h connect.h errors.h command.h \
		  module.h script.h opts.h goal.h machdep.h parser.c 
subst@OBJ@	: $(PRELUDE) storage.h connect.h errors.h output.h \
                  opts.h subst.h
static@OBJ@	: $(PRELUDE) storage.h connect.h errors.h machdep.h \
		  output.h subst.h module.h opts.h goal.h scc.c 
type@OBJ@	: $(PRELUDE) storage.h connect.h errors.h output.h \
		  subst.h goal.h preds.c scc.c
output@OBJ@	: $(PRELUDE) storage.h connect.h errors.h output.h
compiler@OBJ@	: $(PRELUDE) storage.h connect.h errors.h goal.h
machine@OBJ@	: $(PRELUDE) storage.h connect.h errors.h
plugin@OBJ@	: $(PRELUDE) storage.h connect.h errors.h
builtin@OBJ@	: $(PRELUDE) storage.h connect.h errors.h machdep.h \
		  builtin.h bignums.c printer.c iomonad.c interns.c \
		  stmonad.c array.c dirprim.c timeprim.c
ffi@OBJ@	: $(PRELUDE) storage.h connect.h errors.h output.h strutil.h
module@OBJ@	: $(PRELUDE) storage.h connect.h errors.h module.h
machdep@OBJ@	: $(PRELUDE) storage.h connect.h errors.h command.h \
		  opts.h machdep.h
script@OBJ@	: $(PRELUDE) storage.h connect.h errors.h machdep.h \
		  opts.h strutil.h script.h 
strutil@OBJ@	: $(PRELUDE) storage.h connect.h errors.h strutil.h
errors@OBJ@	: $(PRELUDE) storage.h connect.h errors.h output.h \
		  opts.h goal.h evaluator.h
goal@OBJ@	: $(PRELUDE) storage.h machdep.h opts.h goal.h
opts@OBJ@	: $(PRELUDE) storage.h connect.h errors.h machdep.h \
		  strutil.h opts.h
observe@OBJ@	: $(PRELUDE) storage.h connect.h errors.h command.h \
		  machdep.h builtin.h output.h observe.h
evaluator@OBJ@	: $(PRELUDE) storage.h connect.h errors.h script.h \
		  output.h strutil.h opts.h machdep.h evaluator.h

################################################################
# Regression tests (none supplied)
################################################################

check		:

check_libraries : libraries
		  unix/test_libraries $(FPTOOLS)

@MkInstall@

################################################################
# End of Makefile
################################################################
